<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lambda on hossi&#39;s blog</title>
    <link>https://hossi97.github.io/docs/study/java/Lambda/</link>
    <description>Recent content in Lambda on hossi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hossi97.github.io/docs/study/java/Lambda/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>람다식</title>
      <link>https://hossi97.github.io/docs/study/java/Lambda/Lambda1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hossi97.github.io/docs/study/java/Lambda/Lambda1/</guid>
      <description>람다식 Lambda Expression # 794 ~ 800p
람다식 # Java 8 부터 제공되는 메서드를 하나의 식으로 표현하는 기능
람다식을 사용하면 메서드의 이름과 반환값이 없어지므로 익명함수 Anonymous Function 라고 부르기도 한다.
람다식의 사용방법을 예제로 살펴보자.
람다식 X
int[] arr = new int[5]; Arrays.setAll(arr, method()); int method() { return (int) (Math.random() * 5) + 1; } 람다식 O
int[] arr = new int[5]; Arrays.setAll(arr, (i) -&amp;gt; (int)(Math.random() * 5) + 1); 위와 같이 람다식을 사용하면 따로 메서드를 선언-정의-호출해 줄 필요가 없다.</description>
    </item>
    
    <item>
      <title>람다식의 타입과 형변환</title>
      <link>https://hossi97.github.io/docs/study/java/Lambda/Lambda2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hossi97.github.io/docs/study/java/Lambda/Lambda2/</guid>
      <description> 람다식 Lambda Expression # 람다식의 장단점 # 장점 # 기존 익명함수 코드를 줄여 간단하게 작성 가능 가독성 증가 병렬 프로그래밍에 용이 단점 # 남용하면 코드를 이해하는데 어려움 까다로운 재귀 활용 및 디버깅 </description>
    </item>
    
  </channel>
</rss>
